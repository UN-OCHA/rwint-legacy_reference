<?php

/**
 * @file
 * Defines simple text field types.
 */

/**
 * Implements hook_help().
 */
function legacy_reference_help($path, $arg) {
  switch ($path) {
    case 'admin/help#text':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Legacy Reference module defines a field that can contain one or more legacy IDs. These legacy ids can be resolved to Drupal references (= taxonomy terms relations, node references) if they point to a Feeds feed_item.guid ID.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function legacy_reference_cron() {
  require_once('legacy_reference.cron.inc');
  $entity_types = legacy_reference_get_legacy_field_info();
  $last_nid = variable_get('legacy_last_nid');
  if (isset($last_nid)) {
    legacy_reference_resolve_legacy_ids($entity_types);
  }
}

/**
 * Sets legacy_last_nid in variable table which will allows
 * legacy mapping to begin. This prevents mapping before
 * all feeds are imported.
 */
function legacy_reference_start_resolving() {
  variable_set('legacy_last_nid', 0);
}

/**
 * Implements hook_field_info().
 */
function legacy_reference_field_info() {
  return array(
    'legacy_reference' => array(
      'label' => t('Legacy reference'),
      'description' => t('This field stores legacy ids, one per line in the database.'),
      'instance_settings' => array(
        'reference_field' => '',
        'text_processing' => 0, // We are reusing text widgets, make sure they are properly configured.
      ),
      'default_widget' => 'text_textarea',
      'default_formatter' => 'legacy_reference_plain',
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function legacy_reference_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $options = array();
  $known_fields = legacy_reference_reference_field_info();
  foreach (field_info_instances($instance['entity_type'], $instance['bundle']) as $k => $v) {
    $field_info = field_info_field($k);
    if ($k != $instance['field_name'] && isset($known_fields[$field_info['type']])) {
      $options[$k] = $v['label'];
    }
  }
  $form['reference_field'] = array(
    '#type' => 'select',
    '#title' => t('Reference field'),
    '#description' => t('Select that this legacy reference maps to. For instance a taxonomy field. When resolving references, Legacy reference field will attempt to find existing entities with matching legacy ids and configure the reference field specified here accordingly. Allowed field types: <strong>@types</strong>', array('@types' => implode(', ', array_keys($known_fields)))),
    '#options' => $options,
    '#default_value' => $settings['reference_field'],
  );

  return $form;
}

/**
 * Implements hook_field_load().
 *
 * Where possible, generate the sanitized version of each field early so that
 * it is cached in the field cache. This avoids looking up from the filter cache
 * separately.
 *
 * @see text_field_formatter_view()
 */
function legacy_reference_field_load($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Only process items with a cacheable format, the rest will be handled
      // by formatters if needed.
      if (empty($instances[$id]['settings']['text_processing']) || filter_format_allowcache($item['format'])) {
        $items[$id][$delta]['safe_value'] = isset($item['value']) ? _text_sanitize($instances[$id], $langcode, $item, 'value') : '';
        if ($field['type'] == 'text_with_summary') {
          $items[$id][$delta]['safe_summary'] = isset($item['summary']) ? _text_sanitize($instances[$id], $langcode, $item, 'summary') : '';
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function legacy_reference_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function legacy_reference_field_formatter_info() {
  return array(
    'legacy_reference_plain' => array(
      'label' => t('Plain'),
      'field types' => array('legacy_reference', 'text_long', 'text_with_summary'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function legacy_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] == 'legacy_reference_plain') {
    $element = array();
    foreach ($items as $delta => $item) {
      $element[$delta] = array('#markup' => check_plain($item['value']));
    }
    return $element;
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function legacy_reference_field_widget_info_alter(&$info) {
  $info['text_textarea']['field types'][] = 'legacy_reference';
}

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * @see FeedsNodeProcessor::getMappingTargets().
 */
function legacy_reference_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);
    if ($info['type'] == 'legacy_reference') {
      $targets[$name] = array(
        'name' => $instance['label'],
        'callback' => 'field_feeds_set_target',
        'description' => t('The @label field of the node.', array('@label' => $instance['label'])),
      );
    }
  }
}

/**
 * @defgroup mapping Mapping functions
 * {
 */

/**
 * Return an array of allowed reference fields.
 *
 * @return
 *   An array in the format array('field_type' => 'mapping_callback');
 */
function legacy_reference_reference_field_info() {
  return array(
    'taxonomy_term_reference' => 'legacy_reference_map_taxonomy',
  );
}

/**
 * @defgroup
 * }
 */